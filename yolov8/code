import cv2
import numpy as np
import argparse
import time
from ultralytics import YOLO

# Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument('--webcam', help="True/False", default=False)
parser.add_argument('--play_video', help="True/False", default=False)
parser.add_argument('--image', help="True/False", default=False)
parser.add_argument('--video_path', help="Path of video file", default="videos/fire1.mp4")
parser.add_argument('--image_path', help="Path of image to detect objects", default="Images/bicycle.jpg")
parser.add_argument('--verbose', help="To print statements", default=True)
args = parser.parse_args()

# Load YOLOv8 model
model = YOLO("yolov8n.pt")

def process_frame(frame):
    results = model(frame)
    results.render()  # Update frame in-place with bounding boxes and labels
    return frame

def webcam_detect():
    cap = cv2.VideoCapture(0)
    print('---- Starting Web Cam object detection ----')
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        frame = process_frame(frame)
        cv2.imshow("Webcam", frame)
        if cv2.waitKey(1) == 27:  # ESC to quit
            break
    cap.release()

def start_video(video_path):
    cap = cv2.VideoCapture(video_path)
    print(f'Opening {video_path} .... ')
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        frame = process_frame(frame)
        cv2.imshow("Video", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):  # 'q' to quit
            break
    cap.release()

def image_detect(img_path):
    img = cv2.imread(img_path)
    img = process_frame(img)
    cv2.imshow("Image", img)
    print(f'Opening {img_path} .... ')
    cv2.waitKey(0)

if __name__ == '__main__':
    if args.webcam:
        webcam_detect()
    if args.play_video:
        start_video(args.video_path)
    if args.image:
        image_detect(args.image_path)

    cv2.destroyAllWindows()
